// Cronograma por dia da semana
const weeklySchedule = {
    0: ["‰ºë„Åø„ÅÆÊó• (No study scheduled)"], // Domingo
    1: [ // Segunda-feira
        "20ÂàÜ: ÊñáÊ≥ïÔºàÊñáÊ≥ïÊßãÈÄ†„Çí2„Å§ÂãâÂº∑„Åô„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Ë™ûÂΩôÔºàÊñ∞„Åó„ÅÑÂçòË™û„Çí10ÂÄãË¶ö„Åà„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Êº¢Â≠óÔºàÊñ∞„Åó„ÅÑÊº¢Â≠ó„Çí5ÂÄãÂãâÂº∑„Åô„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Èñ¢Ë•øÂºÅÔºàË°®Áèæ„ÇíÂ≠¶„Å≥„ÄÅÊ®ôÊ∫ñË™û„Å®ÊØîËºÉ„Åô„ÇãÔºâ"
    ],
    2: [ // Ter√ßa-feira
        "30ÂàÜ: ÊñáÊ≥ïÔºàÊúàÊõúÊó•„ÅÆÊñáÊ≥ïÊßãÈÄ†„ÇíÂæ©Áøí„Åó„ÄÅÊñ∞„Åó„ÅÑÊßãÈÄ†„Çí2„Å§ÂãâÂº∑„Åô„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "30ÂàÜ: Ë™ûÂΩôÔºàË¶ö„Åà„ÅüÂçòË™û„ÇíÂæ©Áøí„Åó„ÄÅÊñ∞„Åó„ÅÑÂçòË™û„Çí10ÂÄãË¶ö„Åà„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Êº¢Â≠óÔºàÂâçÂõû„ÅÆÊº¢Â≠ó„ÇíÂæ©Áøí„Åó„ÄÅÊñ∞„Åó„ÅÑÊº¢Â≠ó„Çí5ÂÄãÂãâÂº∑„Åô„ÇãÔºâ"
    ],
    3: [ // Quarta-feira
        "30ÂàÜ: ÊñáÊ≥ïÔºà‰ªäÈÄ±ÂãâÂº∑„Åó„ÅüÊñáÊ≥ï„ÇíÂÖ®„Å¶Á∑¥Áøí„Åô„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "30ÂàÜ: Ë™ûÂΩôÔºàË¶ö„Åà„ÅüÂçòË™û„ÇíÁ∑¥ÁøíÂïèÈ°å„ÇÑÊñáÁ´†„ÅßÂÆöÁùÄ„Åï„Åõ„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Êº¢Â≠óÔºàÂ≠¶„Çì„Å†Êº¢Â≠ó„ÇíÂê´„ÇÄÁ∞°Âçò„Å™ÊñáÁ´†„ÇíË™≠„ÇÄÔºâ"
    ],
    4: [ // Quinta-feira
        "20ÂàÜ: ÊñáÊ≥ïÔºàÊñ∞„Åó„ÅÑÊñáÊ≥ïÊßãÈÄ†„Çí2„Å§ÂãâÂº∑„Åô„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Ë™ûÂΩôÔºàÊñ∞„Åó„ÅÑÂçòË™û„Çí10ÂÄãË¶ö„Åà„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Êº¢Â≠óÔºàÊñ∞„Åó„ÅÑÊº¢Â≠ó„Çí5ÂÄãÂãâÂº∑„Åô„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Èñ¢Ë•øÂºÅÔºà„Éï„É¨„Éº„Ç∫„ÇíÁ∑¥Áøí„Åó„ÄÅÈñ¢Ë•øÂºÅ„ÅÆ‰ºöË©±„ÇíËÅû„ÅèÔºâ"
    ],
    5: [ // Sexta-feira
        "40ÂàÜ: Á∑èÂæ©ÁøíÔºàÊñáÊ≥ï„ÄÅË™ûÂΩô„ÄÅÊº¢Â≠ó„ÇíÂÖ®„Å¶Âæ©Áøí„Åô„ÇãÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: Ê®°Êì¨Ë©¶È®ìÔºàJLPT N4„ÅÆÂïèÈ°å„ÇíËß£„ÅèÔºâ",
        "5ÂàÜ: ‰ºëÊÜ©",
        "20ÂàÜ: ËøΩÂä†Á∑¥ÁøíÔºà‰ªäÈÄ±„ÅÆÂÜÖÂÆπ„Çí‰Ωø„Å£„ÅüË™≠Ëß£„ÄÅËÅ¥Ëß£„ÄÅ„Åæ„Åü„ÅØ‰ΩúÊñáÔºâ"
    ],
    6: ["‰ºë„Åø„ÅÆÊó• (No study scheduled)"] // S√°bado
};

// Inicializar o Pikaday
const picker = new Pikaday({
    field: document.getElementById("calendar"),
    format: "YYYY-MM-DD",
    onSelect: function () {
        const selectedDate = this.getMoment();
        const dayOfWeek = selectedDate.day(); // Obt√©m o dia da semana (0 = Domingo, 6 = S√°bado)
        displaySchedule(dayOfWeek);
    },
});

// Fun√ß√£o para exibir o cronograma
function displaySchedule(dayOfWeek) {
    const scheduleContainer = document.querySelector(".container");
    const activities = weeklySchedule[dayOfWeek];

    // Limpar atividades existentes
    const existingDays = document.querySelectorAll(".day");
    existingDays.forEach((day) => day.remove());

    // Criar novo dia com atividades
    const dayDiv = document.createElement("div");
    dayDiv.classList.add("day");
    const title = document.createElement("h2");
    title.textContent = `${getDayName(dayOfWeek)} „ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´`;
    dayDiv.appendChild(title);

    activities.forEach((activity) => {
        // Criar o cont√™iner de atividade
        const activityDiv = document.createElement("div");
        activityDiv.classList.add("activity");

        // Criar o texto da atividade
        const activityText = document.createElement("span");
        activityText.textContent = activity;

        // Criar o bot√£o de in√≠cio
        const timerButton = document.createElement("button");
        timerButton.classList.add("timer-button");
        timerButton.textContent = "ÈñãÂßã"; // Texto do bot√£o
        timerButton.dataset.time = extractTime(activity); // Define o tempo extra√≠do como atributo data

        // Adicionar barra de progresso
        const progressBar = document.createElement("div");
        progressBar.classList.add("progress-bar");
        const progressFill = document.createElement("div");
        progressFill.classList.add("progress-fill");
        progressBar.appendChild(progressFill);

        // Adicionar elementos ao cont√™iner da atividade
        activityDiv.appendChild(activityText);
        activityDiv.appendChild(progressBar);
        activityDiv.appendChild(timerButton);
        dayDiv.appendChild(activityDiv);
    });

    scheduleContainer.appendChild(dayDiv);
}

// Fun√ß√£o para obter o tempo da atividade
function extractTime(activityText) {
    const match = activityText.match(/\d+ÂàÜ/); // Busca pelo tempo no formato "XÂàÜ"
    return match ? parseInt(match[0]) : 0; // Retorna o valor num√©rico
}

// Fun√ß√£o para obter o nome do dia da semana
function getDayName(dayOfWeek) {
    const days = ["Êó•ÊõúÊó•", "ÊúàÊõúÊó•", "ÁÅ´ÊõúÊó•", "Ê∞¥ÊõúÊó•", "Êú®ÊõúÊó•", "ÈáëÊõúÊó•", "ÂúüÊõúÊó•"];
    return days[dayOfWeek];
}

// Adicionar evento aos bot√µes ao carregar ou atualizar o cronograma
document.addEventListener("click", function (event) {
    if (event.target.classList.contains("timer-button")) {
        startTimer(event.target);
    }
});

// Fun√ß√£o para iniciar o temporizador
function startTimer(button) {
    const totalTime = parseInt(button.dataset.time) * 60; // Tempo total em segundos
    let timeLeft = totalTime;

    // Selecionar a barra de progresso associada
    const progressBar = button.previousElementSibling.querySelector(".progress-fill");

    // Inicializar barra de progresso
    progressBar.style.width = "0%";

    // Desativar o bot√£o durante o temporizador
    button.disabled = true;

    // Atualizar o texto do bot√£o e a barra de progresso a cada segundo
    const timerInterval = setInterval(() => {
        timeLeft--;

        // Atualizar o texto do bot√£o com o tempo restante
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        button.textContent = `${minutes}:${seconds.toString().padStart(2, "0")}`;

        // Calcular a porcentagem do progresso
        const progressPercentage = ((totalTime - timeLeft) / totalTime) * 100;
        progressBar.style.width = `${progressPercentage}%`;

        // Quando o tempo expirar
        if (timeLeft <= 0) {
            clearInterval(timerInterval);

            // Atualizar a barra e o bot√£o para "completado"
            button.textContent = "üå∏ ÂÆå‰∫Ü"; // Exibir conclus√£o
            progressBar.style.width = "100%"; // Completar a barra
            button.style.backgroundColor = "#81c784"; // Indicar conclus√£o no bot√£o
            button.disabled = false; // Reativar o bot√£o, se necess√°rio

            // Tocar o som ao concluir
            playCompletionSound();
        }
    }, 1000); // Intervalo de 1 segundo
}

// Fun√ß√£o para tocar o som ao finalizar o temporizador
function playCompletionSound() {
    const audio = new Audio("sounds/harp-japanese-80bpm-85660.mp3"); // Caminho para o arquivo de som
    audio.play();
}
